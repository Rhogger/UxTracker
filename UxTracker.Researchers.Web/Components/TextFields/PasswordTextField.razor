@using UxTracker.Core.Contexts.Account.Validators
@using UxTracker.Researchers.Web.Enums

<MudTextField
    ShrinkLabel="true"
    T="string"
    Label="@Label"
    HelperText="@(HasHelperText ? "Dica: Uma senha forte contém letras maiúsculas e minúsculas, números e caracteres especiais" : null)"
    InputType="@PasswordInput"
    Variant="Variant.Filled"
    Value="@Password"
    ValueChanged="SetPasswordAsync"
    Required="true"
    RequiredError="A senha deve ser informada"
    Immediate="true"
    OnlyValidateIfDirty="true"
    Validation="@(SelectedValidator)"
    Adornment="Adornment.End"
    AdornmentIcon="@PasswordInputIcon"
    AdornmentAriaLabel="Mostrar senha"
    OnAdornmentClick="ShowPassword"
/>

@code
{
    [Parameter] public string Password { get; set; }  = string.Empty;
    [Parameter] public string ConfirmPassword { get; set; }  = string.Empty;
    [Parameter] public ValidatorTypes ValidatorType { get; set; }
    [Parameter] public bool HasHelperText { get; set; }
    [Parameter] public string Label { get; set; } = "Senha";
    
    [Parameter] public EventCallback<string> PasswordChanged { get; set; } 
    
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool IsPasswordShow;

    public void ShowPassword()
    {
        IsPasswordShow = !IsPasswordShow;
        PasswordInputIcon = IsPasswordShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = IsPasswordShow ? InputType.Text : InputType.Password;
    }
    
    private Func<string, string?>? SelectedValidator => ValidatorType switch
    {
        ValidatorTypes.Validator => PasswordValidator.Validate,
        ValidatorTypes.Comparator => input => PasswordValidator.ComparePasswords(input, Password),
        _ => null
    };
    
    private async Task SetPasswordAsync(string value)
    {
        Password = value;
        await PasswordChanged.InvokeAsync(value);
    }
}
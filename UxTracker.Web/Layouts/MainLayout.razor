@using System.Security.Claims
@using Blazored.LocalStorage
@using UxTracker.Core.Contexts.Account.Handlers
@using UxTracker.Core.Security
@using UxTracker.Web.Utils.Theme

@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" Theme="CustomTheme.Theme" />
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

@if (!IsBusy)
{
    <AuthorizeView Roles="Researcher, Reviewer">
        <Authorized>
            <MudLayout Style="height: 100vh">
                <MudAppBar>
                    @if (User.IsInRole("Researcher"))
                    {
                        <MudLink Href="/projects">
                            <MudText
                                Typo="Typo.h5"
                                Style="font-weight: bold; color: white;">
                                UxTracker
                            </MudText>
                        </MudLink>
                    }

                    @if (User.IsInRole("Reviewer"))
                    {
                        <MudLink Href="/reviewers/research">
                            <MudText
                                Typo="Typo.h5"
                                Style="font-weight: bold; color: white;">
                                UxTracker
                            </MudText>
                        </MudLink>
                    }

                    <MudSpacer/>

                    <div class="d-flex gap-3">
                        <MudIconButton
                            Icon="@Icon"
                            Color="Color.Inherit"
                            OnClick="ChangeMode"/>

                        @if (User.IsInRole("Researcher"))
                        {
                            <MudIconButton
                                Icon="@Icons.Material.Filled.Person"
                                Color="Color.Inherit"
                                Href="/account"/>
                        }

                        @if (User.IsInRole("Reviewer"))
                        {
                            <MudIconButton
                                Icon="@Icons.Material.Filled.Person"
                                Color="Color.Inherit"
                                Href="/reviewers/account"/>
                        }

                        <MudIconButton
                            Icon="@Icons.Material.Filled.Logout"
                            Color="Color.Inherit"
                            OnClick="SignOutAsync"/>
                    </div>
                </MudAppBar>

                <MudMainContent Class="py-14 h-full r-main-container">
                    @Body
                </MudMainContent>
            </MudLayout>
        </Authorized>
        
        <NotAuthorized>
            @if (User.Identity is { IsAuthenticated: true })
            {
                <RedirectToUnauthorizedPage/>
            }
            else
            {
                if (UserType.Equals("researcher"))
                {
                    <RedirectToLoginResearcher/>
                }
                else if (UserType.Equals("reviewer"))
                {
                    <RedirectToLoginReviewer/>
                }
                else
                {
                    <RedirectToLandingPage/>
                }
            }
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <Authorizing/>
}

@code
{
    [Inject] protected IBlazorAuthenticationStateProvider BlazorAuthenticationStateProvider { get; set; }
    [Inject] protected IAccountContextHandler AccountContextHandler { get; set; }
    [Inject] protected NavigationManager Navigation { get; set; }
    [Inject] protected ILocalStorageService LocalStorage { get; set; } = null!;
    
    private bool IsDarkMode = true;
    private string Icon = Icons.Material.Filled.WbSunny;

    private ClaimsPrincipal User { get; set; } = null!;
    private bool IsBusy { get; set; } = true;
    protected string UserType { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        UserType = await LocalStorage.GetItemAsync<string>("type") ?? string.Empty;
        var authState = await BlazorAuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        
        if (User.Identity is { IsAuthenticated: false })
            Navigation.NavigateTo("/login");
        else
        {
            var currentUrl = Navigation.Uri;
            await LocalStorage.SetItemAsync("currentUrl", currentUrl);
        }

        IsBusy = false;
    }
    
    private void ChangeMode()
    {
        IsDarkMode = !IsDarkMode;
        Icon = IsDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.WbSunny;
    }

    private async void SignOutAsync()
    {
        await AccountContextHandler.SignOutAsync();
        
        if(User.IsInRole("Researcher"))
            Navigation.NavigateTo("/login");
        if(User.IsInRole("Reviewer"))
            Navigation.NavigateTo("/reviewers/login");
        
    }
}
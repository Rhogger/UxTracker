@using ApexCharts

@page "/project/{id:int}"

<AuthorizeView Roles="Researcher">
    <Authorized>
    <MudContainer Fixed="true" Class="pa-20">
        <div class="d-flex justify-start mb-2">
            <MudButton Href="/researchers/home" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" Class="py-2 px-15">
                Voltar
            </MudButton>
        </div>
        @if (!IsEditState)
{
    <MudPaper Class="pa-4 rounded-lg" Outlined="true">
        <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center" Class="pa-5">@Title</MudText>
        <MudText Typo="Typo.body1" Align="MudBlazor.Align.Center">@Description</MudText>

        <MudForm Class="pa-5">
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="3">
                    <MudDatePicker Label="Data Inicial" @bind-Date="_startDate" ReadOnly="true" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField ShrinkLabel="true" T="string" Label="Código da pesquisa" Variant="Variant.Filled" FullWidth="true" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @ref="textFieldRef" ShrinkLabel="true" T="string" Label="Link da Avaliação"
                                  Value="@evaluationLink" ReadOnly="true" Variant="Variant.Filled" FullWidth="true" 
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" 
                                  OnAdornmentClick="CopyTextToClipboard" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudDatePicker Label="Data Final" @bind-Date="_endDate" ReadOnly="true" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField ShrinkLabel="true" T="string" Label="Status" Variant="Variant.Filled" FullWidth="true" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField ShrinkLabel="true" T="string" Label="Termo de Aceite" ReadOnly="true" Variant="Variant.Filled"
                                  FullWidth="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Download"
                                  OnAdornmentClick="DownloadFile" />
                </MudItem>
            </MudGrid>
        </MudForm>
        @if (Status != "Concluído"){
        <div class="d-flex justify-end">
            <MudButton EndIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="MudBlazor.Color.Info" 
                       Class="py-2 px-15" OnClick="ChangeState"> Editar
            </MudButton>
        </div>
        }
    </MudPaper>
}
else
{
    <MudPaper Class="pa-4 rounded-lg" Outlined="true">
        <MudTextField T="string" Label="Título da pesquisa" Variant="Variant.Filled" FullWidth="true" 
                      @bind-Value="Title" Class="pa-5" />
        <MudTextField T="string" Label="Descrição da pesquisa" Variant="Variant.Filled" FullWidth="true" 
                      @bind-Value="Description" Class="pa-5" />

        <MudForm Class="pa-5">
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="3">
                    <MudDatePicker Label="Data Inicial" @bind-Date="_startDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField ShrinkLabel="true" T="string" Label="Código da pesquisa" Variant="Variant.Filled" FullWidth="true" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @ref="textFieldRef" ShrinkLabel="true" T="string" Label="Link da Avaliação"
                                  Value="@evaluationLink" Variant="Variant.Filled" FullWidth="true" 
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" 
                                  OnAdornmentClick="CopyTextToClipboard" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudDatePicker Label="Data Final" @bind-Date="_endDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField ShrinkLabel="true" T="string" Label="Status" Variant="Variant.Filled" FullWidth="true" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField ShrinkLabel="true" T="string" Label="Termo de Aceite" ReadOnly="true" Variant="Variant.Filled"
                                  FullWidth="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Download"
                                  OnAdornmentClick="DownloadFile" />
                </MudItem>
            </MudGrid>
        </MudForm>
        <div class="d-flex justify-center">
    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Class="py-2 px-15 mx-2" OnClick="CancelChanges">Cancelar</MudButton>
    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Success" Class="py-2 px-15 mx-2" OnClick="ChangeState">Salvar</MudButton>
</div>
    </MudPaper>
}

@if (Status == "Em andamento")
{
    <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center" Class="pa-5">Relatório</MudText>
    
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudPaper Class="pa-5 rounded-lg" Outlined="true">
            <ApexChart TItem="BoxPlotSample" Title="Distribuição das avaliações por período" Options=options @ref=BoxPlot>
                <ApexBoxPlotSeries TItem="BoxPlotSample" Items="incidents" Name="incidents" XValue="@(e => e.Name)"
                                   Max="@(e => (decimal)e.Max)" Min="@(e => (decimal)e.Min)" Quantile1="@(e => (decimal)e.Q1)"
                                   Quantile3="@(e => (decimal)e.Q3)" Median="@(e => (decimal)e.Median)" />
            </ApexChart>
        </MudPaper>
        
        <div class="d-flex justify-end mt-3">
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Success" Class="py-2 px-15" OnClick="FinishResearch">
                Finalizar Pesquisa
            </MudButton>
        </div>
    </MudContainer>
}
      else if (Status == "Concluído")
    {
        <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center" Class="pa-5">Relatórios</MudText>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-5 rounded-lg" Outlined="true">
                <ApexChart TItem="BoxPlotSample" Title="Distribuição das avaliações por período" Options=options @ref=BoxPlot>
                    <ApexBoxPlotSeries TItem="BoxPlotSample" Items="incidents" Name="incidents" XValue="@(e => e.Name)"
                                       Max="@(e => (decimal)e.Max)" Min="@(e => (decimal)e.Min)" Quantile1="@(e => (decimal)e.Q1)"
                                       Quantile3="@(e => (decimal)e.Q3)" Median="@(e => (decimal)e.Median)" />
                </ApexChart>
            </MudPaper>

            <MudContainer Class="pa-5" MaxWidth="MaxWidth.Medium">
                <MudPaper Class="pa-5 rounded-lg" Outlined="true">
                    <ApexChart TItem="Cluster" Title="Distribuição de Desconto" XAxisType="XAxisType.Numeric" Debug Options="ClustersOptions">
                        <ApexPointSeries TItem="Cluster" Items="clusters" Name="% Bruto" SeriesType="SeriesType.Scatter"
                                         XValue="@(e => e.DiscountPercentage)" YValue="@(e => e.GrossValue)" OrderByDescending="e=>e.X" />
                        <ApexPointSeries TItem="Cluster" SeriesType="SeriesType.Line" Name="Tendência"
                                         XValue="@(e => e.DiscountPercentage)" YValue="@(e => e.GrossValue)" OrderByDescending="e=>e.X" />
                    </ApexChart>
                </MudPaper>
            </MudContainer>
        </MudContainer>
    }
</MudContainer>
</Authorized>
    
    <NotAuthorized>
        <RedirectToUnauthorizedPage/>
    </NotAuthorized>
</AuthorizeView>


@code {

    private string Status = "Em andamento";
    private bool IsEditState = false;
    private string Title = "Título da pesquisa";
    private string Description = "Descrição da pesquisa";
    private string OriginalTitle;
    private string OriginalDescription;

    private void ChangeState()
    {
        if (!IsEditState)
        {
            OriginalTitle = Title;
            OriginalDescription = Description;
        }
        IsEditState = !IsEditState;
    }


    private void SaveChanges()
    {

        IsEditState = false;

    }
     private void CancelChanges()
    {
        Title = OriginalTitle;
        Description = OriginalDescription;

        IsEditState = false;
    }

    private async Task FinishResearch()
{

    Status = "Concluído";

    Snackbar.Add("Pesquisa finalizada com sucesso!", Severity.Success);
}

    // BoxPlot
    private List<BoxPlotSample> incidents { get; set; } = SampleData.GetBoxPlotData();
    private ApexChartOptions<BoxPlotSample> options;
    private ApexChart<BoxPlotSample> BoxPlot;

    // Bar Charts
    private List<Order> Orders { get; set; } = SampleData.GetOrders();

    private ApexChartOptions<Order> barChartOptions;
    private ApexChart<Order> BarChart;

    // Cluster

    private List<Cluster> clusters { get; set; } = SampleData.GetClusters();
    private ApexChartOptions<Cluster> ClustersOptions = new();

    protected override void OnInitialized()
    {
        options = new ApexChartOptions<BoxPlotSample>
        {
            Theme = new Theme
            {
                Mode = Mode.Light,
            }
        };

        barChartOptions = new ApexChartOptions<Order>
        {
            Theme = new Theme
            {
                Mode = Mode.Light,
            }
        };

        ClustersOptions = new ApexChartOptions<Cluster>
        {
            Tooltip = new ApexCharts.Tooltip { Shared = false, Intersect = true },
            Markers = new Markers { Size = 6 },

            Theme = new Theme
            {
                Mode = Mode.Light,
            }
        };
    }


    private async Task UpdateChart()
    {
        await BoxPlot.RenderAsync();
        await BarChart.RenderAsync();
    }

    public static class SampleData
    {
        public static List<BoxPlotSample> GetBoxPlotData()
        {
            return new List<BoxPlotSample>
            {
                new BoxPlotSample { Name = "A", Min = 10, Q1 = 20, Median = 30, Q3 = 40, Max = 50 },
                new BoxPlotSample { Name = "B", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "C", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "D", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "E", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "F", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "G", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 },
                new BoxPlotSample { Name = "H", Min = 15, Q1 = 25, Median = 35, Q3 = 45, Max = 55 }
            };
        }

        public static List<Order> GetOrders()
        {
            return new List<Order>
            {
                new Order { Country = "USA", GrossValue = 1000000, NetValue = 850000 },
                new Order { Country = "Canada", GrossValue = 750000, NetValue = 650000 },
                new Order { Country = "UK", GrossValue = 800000, NetValue = 720000 },
                new Order { Country = "Germany", GrossValue = 650000, NetValue = 590000 },
                new Order { Country = "France", GrossValue = 700000, NetValue = 630000 }
            };
        }

        public static List<Cluster> GetClusters()
        {
            return new List<Cluster>
            {
                new Cluster { DiscountPercentage = 5, GrossValue = 3000 },
                new Cluster { DiscountPercentage = 70, GrossValue = 70000 },
                new Cluster { DiscountPercentage = 30, GrossValue = 30000 },
                new Cluster { DiscountPercentage = 50, GrossValue = 50000 },
                new Cluster { DiscountPercentage = 90, GrossValue = 90000 },
                new Cluster { DiscountPercentage = 20, GrossValue = 20000 },
                new Cluster { DiscountPercentage = 80, GrossValue = 80000 },
                new Cluster { DiscountPercentage = 10, GrossValue = 10000 },
                new Cluster { DiscountPercentage = 40, GrossValue = 40000 },
                new Cluster { DiscountPercentage = 60, GrossValue = 60000 },
                new Cluster { DiscountPercentage = 60, GrossValue = 50000 },
                new Cluster { DiscountPercentage = 60, GrossValue = 40000 },
                new Cluster { DiscountPercentage = 5, GrossValue = 5000 },
                new Cluster { DiscountPercentage = 70, GrossValue = 3000 },

            };
        }
    }

    public class BoxPlotSample
    {
        public string Name { get; set; }
        public double Min { get; set; }
        public double Max { get; set; }
        public double Q1 { get; set; }
        public double Q3 { get; set; }
        public double Median { get; set; }
    }

    public class Order
    {
        public string Country { get; set; }
        public decimal GrossValue { get; set; }
        public decimal NetValue { get; set; }
    }

    public class Cluster
    {
        public decimal DiscountPercentage { get; set; }
        public decimal GrossValue { get; set; }
    }
    
    // Campos de data
    private DateTime? _startDate { get; set; } = DateTime.Today;
    private DateTime? _endDate { get; set; } = DateTime.Today;

    // Copiar link para a área de transferência
    private string evaluationLink = "https://exemplo.com.br";
    private MudTextField<string> textFieldRef;

    [Inject] IJSRuntime JSRuntime { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    private async Task CopyTextToClipboard()
    {
        if (textFieldRef != null && !string.IsNullOrEmpty(textFieldRef.Value))
        {
            var textToCopy = textFieldRef.Value;
            await CopyToClipboardAsync(textToCopy);
            Snackbar.Add("Link copiado para sua área de transferência!", Severity.Success);
            Console.WriteLine($"Texto copiado: {textToCopy}");
        }
    }

    private async Task CopyToClipboardAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    //botao download termo
    private string pdfFilePath = "path/to/your/file.pdf";

    private async Task DownloadFile()
    {
        var fileUrl = $"{NavigationManager.BaseUri}{pdfFilePath}";
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
    }

    [Inject] NavigationManager NavigationManager { get; set; } = null!;
}
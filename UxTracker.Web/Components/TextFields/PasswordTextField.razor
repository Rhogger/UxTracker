@using UxTracker.Core.Contexts.Account.Enums
@using UxTracker.Core.Contexts.Account.Validators

<MudTextField
    ShrinkLabel="true"
    T="string"
    Class="@Class"
    Label="@Label"
    HelperText="@(HasHelperText ? "Dica: Uma senha forte contém letras maiúsculas e minúsculas, números e caracteres especiais" : null)"
    InputType="@_passwordInput"
    Variant="Variant.Filled"
    Value="@Password"
    ValueChanged="SetPasswordAsync"
    Required="true"
    RequiredError="A senha deve ser informada"
    Immediate="true"
    OnlyValidateIfDirty="true"
    Validation="@SelectedValidator"
    Adornment="Adornment.End"
    AdornmentIcon="@_passwordInputIcon"
    AdornmentAriaLabel="Mostrar senha"
    OnAdornmentClick="ShowPassword"
    FullWidth="true"
/>

@code
{
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Password { get; set; }  = string.Empty;
    [Parameter] public string ConfirmPassword { get; set; }  = string.Empty;
    [Parameter] public ValidatorTypes ValidatorType { get; set; }
    [Parameter] public bool HasHelperText { get; set; }
    [Parameter] public string Label { get; set; } = "Senha";
    
    [Parameter] public EventCallback<string> PasswordChanged { get; set; } 
    
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _isPasswordShow;

    public void ShowPassword()
    {
        _isPasswordShow = !_isPasswordShow;
        _passwordInputIcon = _isPasswordShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        _passwordInput = _isPasswordShow ? InputType.Text : InputType.Password;
    }
    
    private Func<string, string?>? SelectedValidator => ValidatorType switch
    {
        ValidatorTypes.Validator => PasswordValidator.Validate,
        ValidatorTypes.Comparator => input => PasswordValidator.ComparePasswords(input, ConfirmPassword),
        ValidatorTypes.None => null,
        _ => null
    };
    
    private async Task SetPasswordAsync(string value)
    {
        Password = value;
        await PasswordChanged.InvokeAsync(value);
    }
}
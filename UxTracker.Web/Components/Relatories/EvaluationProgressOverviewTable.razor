@using System.Linq
@using UxTracker.Core.Contexts.Research.DTOs

<MudTable T="ReviewsDto" Dense="true">
    <HeaderContent>
        <MudTh>Estatísticas</MudTh>
        @foreach (var day in Days)
        {
            <MudTh>@($"Dia {day.Key + 1}")</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTr>
            <MudTd>Média</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(day.Value.Average(r => r.Rate).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Mediana</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(Median(day.Value.Select(r => r.Rate)).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Moda</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(Mode(day.Value.Select(r => r.Rate)).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Desvio Padrão</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(StandardDeviation(day.Value.Select(r => r.Rate)).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Maior valor</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(day.Value.Max(r => r.Rate).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Menor valor</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(day.Value.Min(r => r.Rate).ToString("F1"))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Avaliações positivas</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(day.Value.Count(r => r.Rate > 5))</MudTd>
            }
        </MudTr>
        <MudTr>
            <MudTd>Avaliações negativas</MudTd>
            @foreach (var day in Days)
            {
                <MudTd>@(day.Value.Count(r => r.Rate <= 5))</MudTd>
            }
        </MudTr>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public List<ReviewsDto> Reviews { get; set; } = new List<ReviewsDto>();
    private Dictionary<int, List<ReviewsDto>> Days { get; set; } = new();

    protected override void OnInitialized()
    {
        // Agrupa as avaliações por 'Index' (cada dia)
        Days = Reviews
            .GroupBy(r => r.Index)
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private decimal Median(IEnumerable<decimal> numbers)
    {
        var sortedNumbers = numbers.OrderBy(n => n).ToList();
        int count = sortedNumbers.Count;
        if (count % 2 == 0)
        {
            return (sortedNumbers[count / 2 - 1] + sortedNumbers[count / 2]) / 2;
        }
        return sortedNumbers[count / 2];
    }

    private decimal Mode(IEnumerable<decimal> numbers)
    {
        return numbers.GroupBy(n => n)
            .OrderByDescending(g => g.Count())
            .First().Key;
    }

    private decimal StandardDeviation(IEnumerable<decimal> numbers)
    {
        var mean = numbers.Average();
        var variance = numbers.Average(n => (double)(n - mean) * (double)(n - mean));
        return (decimal)Math.Sqrt(variance);
    }
}
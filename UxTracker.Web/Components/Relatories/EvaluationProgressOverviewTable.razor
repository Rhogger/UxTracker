@using System.Linq
@using UxTracker.Core.Contexts.Research.DTOs
@using UxTracker.Core.Contexts.Research.Enums

<MudTable 
    Items="GroupedReviews" 
    FixedHeader="true" 
    Bordered="true" 
    Breakpoint="Breakpoint.Sm" 
    Class="w-full">
    <HeaderContent>
        <MudTh Style="text-align: center;">Dias</MudTh>
        <MudTh Style="text-align: center;">Média</MudTh>
        <MudTh Style="text-align: center;">Mediana</MudTh>
        <MudTh Style="text-align: center;">Moda</MudTh>
        <MudTh Style="text-align: center;">Desvio Padrão</MudTh>
        <MudTh Style="text-align: center;">Maior Valor</MudTh>
        <MudTh Style="text-align: center;">Menor Valor</MudTh>
        <MudTh Style="text-align: center;">Avaliações positivas</MudTh>
        <MudTh Style="text-align: center;">Avaliações negativas</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="text-align: center;" DataLabel="Dias">@(context.Key + 1)</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Média">@context.Average(r => r.Rate).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Mediana">@Median(context.Select(r => r.Rate)).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Moda">@Mode(context.Select(r => r.Rate)).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Desvio Padrão">@StandardDeviation(context.Select(r => r.Rate)).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Maior Valor">@context.Max(r => r.Rate).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Menor Valor">@context.Min(r => r.Rate).ToString("F1")</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Avaliações positivas">@context.Count(r => r.Rate > 5)</MudTd>
        <MudTd Style="text-align: center;" DataLabel="Avaliações negativas">@context.Count(r => r.Rate <= 5)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public List<ReviewsDto> Reviews { get; set; } = new();
    [Parameter] public PeriodType PeriodType { get; set; }

    private IEnumerable<IGrouping<int, ReviewsDto>> GroupedReviews => Reviews.GroupBy(r => r.Index);

    private decimal Median(IEnumerable<decimal> numbers)
    {
        var sortedNumbers = numbers.OrderBy(n => n).ToList();
        int count = sortedNumbers.Count;
        if (count % 2 == 0)
        {
            return (sortedNumbers[count / 2 - 1] + sortedNumbers[count / 2]) / 2;
        }
        return sortedNumbers[count / 2];
    }

    private decimal Mode(IEnumerable<decimal> numbers)
    {
        return numbers.GroupBy(n => n)
            .OrderByDescending(g => g.Count())
            .First().Key;
    }

    private decimal StandardDeviation(IEnumerable<decimal> numbers)
    {
        var mean = numbers.Average();
        var variance = numbers.Average(n => (double)(n - mean) * (double)(n - mean));
        return (decimal)Math.Sqrt(variance);
    }
}
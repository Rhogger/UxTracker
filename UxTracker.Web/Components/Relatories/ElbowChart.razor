@using ApexCharts
@using UxTracker.Core.Contexts.Research.Enums
@using UxTracker.Core.Contexts.Research.Handlers
@using UxTracker.Core.Contexts.Research.UseCases.UpdateStatus
@using UxTracker.Core.Contexts.Research.ValueObjects
@using UpdateCluster = UxTracker.Core.Contexts.Research.UseCases.UpdateNumberCluster
@using ChartType = ApexCharts.ChartType
@using UxTracker.Web.Components.Forms
@using Color = MudBlazor.Color

<div class="@ContainerClass">
    <ApexChart 
        TItem="ElbowChartData"
        @ref="Ref"
        Options="@_options">
        <ApexPointSeries
            TItem="ElbowChartData" 
            Items="ElbowData" 
            Name="WCSS" 
            SeriesType="SeriesType.Line"
            XValue="@(e => e.K)"
            YValue="@(e => e.WCSS)"/>
    </ApexChart>
    
    <div class="d-flex flex-column justify-center align-center">
        <MudText></MudText>
        
        <ValidateForm
            Class="d-flex"
            ButtonColor="Color.Success"
            ButtonIcon="@Icons.Material.Filled.Save"
            ButtonClass="py-2 r-max-btn w-full"
            SubmitFunction="UpdateClusterNumber"
            IsBusy="IsBusy">
            <MudNumericField Min="1" Max="10" bind-Value="@Request.NumberCluster"/>
        </ValidateForm>
    </div>
</div>

@code{
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private IResearchContextHandler ResearchContextHandler { get; set; } = null!;
    
    [Parameter] public EventCallback Event { get; set; }
    [Parameter] public string ContainerClass { get; set; } = string.Empty;

    private ApexChart<ElbowChartData>? Ref { get; set; }
    private ApexChartOptions<ElbowChartData> _options = null!;
    private bool IsBusy { get; set; } = false;
    private UpdateCluster.Request Request = new();
    
    private List<ElbowChartData> ElbowData { get; set; } =
    [
        new ElbowChartData(1, 1000),
        new ElbowChartData(2, 600),
        new ElbowChartData(3, 300),
        new ElbowChartData(4, 200),
        new ElbowChartData(5, 150)
    ];
    
    protected override Task OnParametersSetAsync()
    {
        StateHasChanged();
        Ref?.UpdateSeriesAsync();

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _options = new ApexChartOptions<ElbowChartData>
        {
            Chart = new Chart
            {
                Background = "transparent",
                Width = "100%",
                FontFamily = "Inter",
                Toolbar = new Toolbar
                {
                    Show = false
                },
                DropShadow = new DropShadow
                {
                    Enabled = true,
                    Top = 18,
                    Left = 7,
                    Blur = 10,
                    Opacity = 0.2d
                },
                Selection = new Selection
                {
                    Enabled = false
                },
                Sparkline = new ChartSparkline
                {
                    Enabled = false
                },
                Type = ChartType.Line,
                Brush = new Brush
                {
                    Enabled = false,
                },
                Zoom = new Zoom
                {
                    Enabled = false,
                },
            },
            Tooltip = new Tooltip
            {
                Style  = new TooltipStyle
                {
                    FontFamily = "Inter",
                    FontSize = "12px",
                },
                CssClass = "apexcharts-tooltip",
                Marker = new TooltipMarker
                {
                    FillColors = ["#2DC8B8"]
                },
                X = new TooltipX
                {
                    Show = false,
                }
            },
            DataLabels = new DataLabels
            {
                OffsetY = -6d,
            },
            Grid = new Grid
            {
                BorderColor = "#e7e7e7",
                Yaxis = new GridYAxis
                {
                    Lines = new Lines
                    {
                        Show = true
                    }
                },
                Xaxis = new GridXAxis
                {
                    Lines = new Lines
                    {
                        Show = true
                    },
                },
            },
            Markers = new Markers 
            { 
                Shape = ShapeEnum.Circle,
                Size = 5, 
                FillOpacity = new Opacity(0.8d),
                Colors = new List<string> { "#2DC8B8", "#FFFFFFB2" },
            },
            Stroke = new Stroke
            {
                Curve = Curve.Smooth, 
                Colors = ["#2DC8B8"]
            },
            Legend = new Legend
            {
                FontFamily = "Inter",
                FontSize = "14px",
                FontWeight = "500",
                Position = LegendPosition.Top,
                HorizontalAlign = ApexCharts.Align.Right,
                Floating = true,
                OffsetX = -5,
                OffsetY = -25,
            },
            
            Xaxis = new XAxis
            {
                Min = 1,
                Max = 10,
                Title = new AxisTitle
                {
                    Text = "NÃºmero de Clusters",
                    Style = new AxisTitleStyle
                    {
                        FontFamily = "Inter",
                        FontSize = "14px",
                        FontWeight = "500",
                        Color = "#FFFFFFB2"
                    }
                },
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        FontFamily = "Inter",
                        FontSize = "14px",
                        FontWeight = "500",
                        Colors = "#FFFFFFB2"
                    }
                }
            },
            Yaxis =
            [
                new YAxis
                {
                    Min = 0,
                    Title = new AxisTitle
                    {
                        Text = "WCSS",
                        Style = new AxisTitleStyle
                        {
                            FontFamily = "Inter",
                            FontSize = "14px",
                            FontWeight = "500",
                            Color = "#FFFFFFB2"
                        }
                    },
                    Labels = new YAxisLabels
                    {
                        Style = new AxisLabelStyle
                        {
                            FontFamily = "Inter",
                            FontSize = "14px",
                            FontWeight = "500",
                            Colors = "#FFFFFFB2"
                        }
                    }
                }
            ],
        };
    }

    private async Task UpdateClusterNumber()
    {
        try
        {
            IsBusy = true;
            
            var response = await ResearchContextHandler.UpdateNumberClusterAsync(Request);

            if (response is not null)
                if (response.IsSuccessful)
                {
                    Snackbar.Add("Quantidade de clusters alterada com sucesso", Severity.Success);
                    await OnParametersSetAsync();
                }
                else
                {
                    if (response.Data!.Notifications is not null)
                        foreach (var notification in response.Data.Notifications)
                            Snackbar.Add(notification.Message, Severity.Error);
                    else
                        Snackbar.Add($"Erro: {response.Data.StatusCode} - {response.Data.Message}", Severity.Error);
                }
            else
                Snackbar.Add("Ocorreu algum erro no nosso servidor. Por favor, tente mais tarde.", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}", Severity.Error);
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();
        }
    }
}